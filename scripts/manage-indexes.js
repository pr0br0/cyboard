require('dotenv').config();
const mongoose = require('mongoose');
const express = require('express');
const cors = require('cors');
const path = require('path');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
const mongoSanitize = require('express-mongo-sanitize');
const xss = require('xss-clean');
const compression = require('compression');
const morgan = require('morgan');

const connectDB = require('./config/database');
const errorHandler = require('./middleware/errorHandler');

// –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ–± –∏–Ω–¥–µ–∫—Å–∞—Ö
mongoose.set('strictQuery', false);
mongoose.set('debug', process.env.NODE_ENV === 'development');

// –ò–º–ø–æ—Ä—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤
const authRoutes = require('./routes/auth.routes');
const categoryRoutes = require('./routes/category.routes');
const listingRoutes = require('./routes/listing.routes');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = express();

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
connectDB()
    .then(() => console.log('‚úÖ Database connected successfully'))
    .catch((err) => {
        console.error('‚ùå Database connection error:', err);
        process.exit(1);
    });

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
const limiter = rateLimit({
    windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
    max: 100, // –º–∞–∫—Å–∏–º—É–º 100 –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–¥–Ω–æ–≥–æ IP
    message: 'Too many requests from this IP, please try again later.'
});

// Middleware
app.use(helmet()); // –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
app.use('/api', limiter); // Rate limiting –¥–ª—è API
app.use(cors({
    origin: process.env.CORS_ORIGIN || '*',
    credentials: true,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization']
}));
app.use(mongoSanitize()); // –ó–∞—â–∏—Ç–∞ –æ—Ç MongoDB –∏–Ω—ä–µ–∫—Ü–∏–π
app.use(xss()); // –ó–∞—â–∏—Ç–∞ –æ—Ç XSS –∞—Ç–∞–∫
app.use(compression()); // –°–∂–∞—Ç–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
app.use(express.json({ limit: '10kb' })); // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ JSON
app.use(express.urlencoded({ extended: true, limit: '10kb' }));
app.use(express.static(path.join(__dirname, 'public')));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
if (process.env.NODE_ENV === 'development') {
    app.use(morgan('dev'));
}

// Middleware –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏
app.use((req, res, next) => {
    req.requestTime = new Date().toISOString();
    next();
});

// API –º–∞—Ä—à—Ä—É—Ç—ã
app.use('/api/auth', authRoutes);
app.use('/api/categories', categoryRoutes);
app.use('/api/listings', listingRoutes);

// –ë–∞–∑–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
app.get('/api', (req, res) => {
    res.json({
        success: true,
        timestamp: req.requestTime,
        name: 'Cyprus Classified API',
        version: process.env.npm_package_version || '1.0.0',
        environment: process.env.NODE_ENV,
        endpoints: {
            auth: {
                register: 'POST /api/auth/register',
                login: 'POST /api/auth/login',
                profile: 'GET /api/auth/profile'
            },
            categories: {
                getAll: 'GET /api/categories',
                getOne: 'GET /api/categories/:id',
                create: 'POST /api/categories',
                update: 'PUT /api/categories/:id',
                delete: 'DELETE /api/categories/:id'
            },
            listings: {
                getAll: 'GET /api/listings',
                getOne: 'GET /api/listings/:id',
                create: 'POST /api/listings',
                update: 'PUT /api/listings/:id',
                delete: 'DELETE /api/listings/:id'
            }
        },
        documentation: {
            auth: {
                register: {
                    method: 'POST',
                    url: '/api/auth/register',
                    body: {
                        email: 'string',
                        password: 'string',
                        name: 'string',
                        phone: 'string (optional)'
                    }
                },
                login: {
                    method: 'POST',
                    url: '/api/auth/login',
                    body: {
                        email: 'string',
                        password: 'string'
                    }
                }
            },
            listings: {
                create: {
                    method: 'POST',
                    url: '/api/listings',
                    auth: 'Required',
                    body: {
                        title: {
                            en: 'string',
                            ru: 'string',
                            el: 'string'
                        },
                        description: {
                            en: 'string',
                            ru: 'string',
                            el: 'string'
                        },
                        category: 'categoryId',
                        price: {
                            amount: 'number',
                            currency: 'string',
                            negotiable: 'boolean'
                        },
                        location: {
                            city: 'string',
                            district: 'string',
                            address: 'string'
                        }
                    }
                }
            }
        }
    });
});

// –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
app.get('/api/test', (req, res) => {
    res.json({
        success: true,
        message: 'API is working correctly',
        timestamp: new Date(),
        environment: process.env.NODE_ENV
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404
app.all('*', (req, res) => {
    res.status(404).json({
        success: false,
        error: `Route ${req.originalUrl} not found`
    });
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
app.use(errorHandler);

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
const server = app.listen(PORT, () => {
    console.log(`
üöÄ Server is running in ${process.env.NODE_ENV} mode
üì° Local:            http://localhost:${PORT}
üîë API Docs:         http://localhost:${PORT}/api
‚ö° Database:         ${process.env.NODE_ENV === 'production' ? 'Connected' : process.env.MONGODB_URI}
    `);
});

// Graceful shutdown
const shutdown = () => {
    console.log('üîÑ Received shutdown signal. Closing server...');
    server.close(() => {
        console.log('‚úã Server closed. Process terminated.');
        process.exit(0);
    });

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        console.error('‚ö†Ô∏è Could not close connections in time, forcefully shutting down');
        process.exit(1);
    }, 10000);
};

process.on('SIGTERM', shutdown);
process.on('SIGINT', shutdown);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (err) => {
    console.error('‚ùå Unhandled Rejection:', err);
    shutdown();
});

process.on('uncaughtException', (err) => {
    console.error('‚ùå Uncaught Exception:', err);
    shutdown();
});